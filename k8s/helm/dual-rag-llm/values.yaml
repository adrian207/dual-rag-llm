# Default values for dual-rag-llm
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
global:
  environment: production
  storageClass: ""

# Replica count
replicaCount: 2

# Image configuration
image:
  repository: dual-rag-llm
  pullPolicy: IfNotPresent
  tag: "1.19.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8000"
  prometheus.io/path: "/metrics"

# Pod security context
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

# Container security context
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000
  allowPrivilegeEscalation: false

# Service configuration
service:
  type: ClusterIP
  port: 8000
  targetPort: 8000
  annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
  hosts:
    - host: dual-rag.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: dual-rag-tls
      hosts:
        - dual-rag.example.com

# Resource limits and requests
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 2Gi

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - dual-rag-llm
          topologyKey: kubernetes.io/hostname

# Liveness probe
livenessProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Readiness probe
readinessProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Startup probe
startupProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 30

# Environment variables
env:
  OLLAMA_URL: "http://ollama:11434"
  LOG_LEVEL: "INFO"
  ENVIRONMENT: "production"

# Secrets (use external secrets or create manually)
secrets:
  # ENCRYPTION_MASTER_KEY: ""
  # BRAVE_SEARCH_API_KEY: ""
  # GITHUB_TOKEN: ""

# ConfigMap data
config:
  ms_docs_url: "https://docs.microsoft.com"
  oss_docs_url: "https://github.com"

# Persistent storage
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 20Gi
  mountPath: /data

# Redis configuration
redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
    password: "changeme"
  master:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 256Mi

# Ollama sidecar
ollama:
  enabled: true
  image:
    repository: ollama/ollama
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 4000m
      memory: 16Gi
      nvidia.com/gpu: "1"
    requests:
      cpu: 2000m
      memory: 8Gi
      nvidia.com/gpu: "1"
  persistence:
    enabled: true
    size: 50Gi
  models:
    - llama3.1
    - deepseek-coder
    - qwen2.5-coder

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 2
  image:
    repository: dual-rag-llm-frontend
    tag: "1.19.0"
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  service:
    port: 3000

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s

# Network Policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Init containers
initContainers:
  - name: wait-for-redis
    image: busybox:1.35
    command: ['sh', '-c', 'until nc -z -v -w30 dual-rag-llm-redis-master 6379; do echo "Waiting for redis..."; sleep 5; done;']

